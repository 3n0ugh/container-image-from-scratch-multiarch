#!/bin/bash
set -e

source demo-magic.sh

function build_hello() {
  echo "Compiling amd64..."
  just build-amd64-binary
  echo "Compiling arm64..."
  just build-arm64-binary
  echo "Done!"
}

pe 'build_hello'

pe "ls -l bin-amd64"
pe "ls -l bin-arm64"

rm -rf output-image
rm -rf temp

pe "# Creating the OCI image layout"
pe "mkdir -p output-image"

pe "# Creating the layer for amd64"
pe "tar cf output-image/layer-amd64.tar.gz bin-amd64"
pe "tar tf output-image/layer-amd64.tar.gz"
pe 'layer_checksum_amd64=$(shasum -a 256 output-image/layer-amd64.tar.gz | cut -d" " -f1)'
pe "layer_size_amd64=\$(wc -c output-image/layer-amd64.tar.gz | awk '{print \$1}')"
pe 'echo $layer_checksum_amd64 $layer_size_amd64'
pe 'mkdir -p output-image/blobs/sha256'
pe 'mv output-image/layer-amd64.tar.gz output-image/blobs/sha256/$layer_checksum_amd64'
pe 'ls output-image/blobs/sha256/$layer_checksum_amd64'
pe "# Layer blob is ready and named properly for amd64!"


pe "# Creating the layer for arm64"
pe "tar cf output-image/layer-arm64.tar.gz bin-arm64"
pe "tar tf output-image/layer-arm64.tar.gz"
pe 'layer_checksum_arm64=$(shasum -a 256 output-image/layer-arm64.tar.gz | cut -d" " -f1)'
pe "layer_size_arm64=\$(wc -c output-image/layer-arm64.tar.gz | awk '{print \$1}')"
pe 'echo $layer_checksum_arm64 $layer_size_arm64'
pe 'mkdir -p output-image/blobs/sha256'
pe 'mv output-image/layer-arm64.tar.gz output-image/blobs/sha256/$layer_checksum_arm64'
pe 'ls output-image/blobs/sha256/$layer_checksum_arm64'
pe "# Layer blob is ready and named properly for arm64!"


pe '# Creating the config blob for amd64!'
pe "os=linux arch=amd64 path=/bin/amd64 entrypoint=/bin-amd64/hello layer_checksum=\$layer_checksum_amd64 $(<config-command)"
pe 'config_checksum_amd64=$(shasum -a 256 output-image/config.json | cut -d" " -f1)'
pe "config_size_amd64=\$(wc -c output-image/config.json | awk '{print \$1}')"
pe 'mv output-image/config.json output-image/blobs/sha256/$config_checksum_amd64'
pe 'ls output-image/blobs/sha256/$config_checksum_amd64'


pe '# Creating the config blob for arm64!'
pe "os=linux arch=arm64 path=/bin/arm64 entrypoint=/bin-arm64/hello layer_checksum=\$layer_checksum_arm64 $(<config-command)"
pe 'config_checksum_arm64=$(shasum -a 256 output-image/config.json | cut -d" " -f1)'
pe "config_size_arm64=\$(wc -c output-image/config.json | awk '{print \$1}')"
pe 'mv output-image/config.json output-image/blobs/sha256/$config_checksum_arm64'
pe 'ls output-image/blobs/sha256/$config_checksum_arm64'


pe '# Creating the manifest blob for amd64!'
pe "config_checksum=\$config_checksum_amd64 config_size=\$config_size_amd64 layer_checksum=\$layer_checksum_amd64 layer_size=\$layer_size_amd64 $(<manifest-command)"
pe 'manifest_checksum_amd64=$(shasum -a 256 output-image/manifest.json | cut -d" " -f1)'
pe "manifest_size_amd64=\$(wc -c output-image/manifest.json | awk '{print \$1}')"
pe 'mv output-image/manifest.json output-image/blobs/sha256/$manifest_checksum_amd64'


pe '# Creating the manifest blob for arm64!'
pe "config_checksum=\$config_checksum_arm64 config_size=\$config_size_arm64 layer_checksum=\$layer_checksum_arm64 layer_size=\$layer_size_arm64 $(<manifest-command)"
pe 'manifest_checksum_arm64=$(shasum -a 256 output-image/manifest.json | cut -d" " -f1)'
pe "manifest_size_arm64=\$(wc -c output-image/manifest.json | awk '{print \$1}')"
pe 'mv output-image/manifest.json output-image/blobs/sha256/$manifest_checksum_arm64'


pe '# Creating the image index reference!'
pe "$(<index-ref-command)"
pe 'index_checksum=$(shasum -a 256 output-image/index-ref.json | cut -d" " -f1)'
pe "index_size=\$(wc -c output-image/index-ref.json | awk '{print \$1}')"
pe 'mv output-image/index-ref.json output-image/blobs/sha256/$index_checksum'


pe '# Creating the image index!'
pe "$(<index-command)"

pe "echo '{\"imageLayoutVersion\":\"1.0.0\"}' > output-image/oci-layout"

pe '# Pushing the image out to a registry!'
pe "crane push output-image localhost:5001/output-image"

pe "# Let's run amd64!"
pe "docker run -it --pull always --platform linux/amd64 localhost:5001/output-image"

pe "# Let's run arm64!"
pe "docker run -it --pull always --platform linux/arm64 localhost:5001/output-image"
